// Q 1
struct Point
{
    public double X;
    public double Y;

    public Point(double x, double y)
    {
        X = x;
        Y = y;
    }
}

class Program
{
    static void Main()
    {
        Console.WriteLine("Enter coordinates for Point 1:");
        Console.Write("X1: ");
        double x1 = Convert.ToDouble(Console.ReadLine());
        Console.Write("Y1: ");
        double y1 = Convert.ToDouble(Console.ReadLine());

        Console.WriteLine("Enter coordinates for Point 2:");
        Console.Write("X2: ");
        double x2 = Convert.ToDouble(Console.ReadLine());
        Console.Write("Y2: ");
        double y2 = Convert.ToDouble(Console.ReadLine());

        Point p1 = new Point(x1, y1);
        Point p2 = new Point(x2, y2);

        double distance = CalculateDistance(p1, p2);
        Console.WriteLine($"Distance between the two points is: {distance:F2}");
    }

    static double CalculateDistance(Point p1, Point p2)
    {
        double dx = p2.X - p1.X;
        double dy = p2.Y - p1.Y;
        return Math.Sqrt(dx * dx + dy * dy);
    }
}

------------------------------------------------------
// Q 2 

struct Person
{
    public string Name;
    public int Age;

    public Person(string name, int age)
    {
        Name = name;
        Age = age;
    }
}

class Program
{
    static void Main()
    {
        Person[] people = new Person[3];

        for (int i = 0; i < 3; i++)
        {
            Console.WriteLine($"Enter details for person {i + 1}:");

            Console.Write("Name: ");
            string name = Console.ReadLine();

            Console.Write("Age: ");
            int age = Convert.ToInt32(Console.ReadLine());

            people[i] = new Person(name, age);
            Console.WriteLine();
        }

        Person oldest = people[0];

        for (int i = 1; i < people.Length; i++)
        {
            if (people[i].Age > oldest.Age)
            {
                oldest = people[i];
            }
        }

        Console.WriteLine($"The oldest person is {oldest.Name} with age {oldest.Age}.");
    }
}

-----------------------------------------------------------
// Q 3 

enum SecurityLevel
{
    Guest,
    Developer,
    Secretary,
    DBA
}

class Employee
{
    public int ID { get; set; }
    public string Name { get; set; }
    private char gender;

    public char Gender
    {
        get { return gender; }
        set
        {
            if (value == 'M' || value == 'F')
                gender = value;
            else
                throw new ArgumentException("Gender must be 'M' or 'F'.");
        }
    }

    public SecurityLevel SecurityLevel { get; set; }
    public decimal Salary { get; set; }
    public DateTime HireDate { get; set; }

    public Employee(int id, string name, char gender, SecurityLevel level, decimal salary, DateTime hireDate)
    {
        ID = id;
        Name = name;
        Gender = gender; 
        SecurityLevel = level;
        Salary = salary;
        HireDate = hireDate;
    }

   
}

class Program
{
    static void Main()
    {
        try
        {
            Console.Write("Enter Employee ID: ");
            int id = Convert.ToInt32(Console.ReadLine());

            Console.Write("Enter Name: ");
            string name = Console.ReadLine();

            Console.Write("Enter Gender (M/F): ");
            char gender = Char.ToUpper(Convert.ToChar(Console.ReadLine()));

            Console.WriteLine("Select Security Level (0: Guest, 1: Developer, 2: Secretary, 3: DBA): ");
            SecurityLevel level = (SecurityLevel)Convert.ToInt32(Console.ReadLine());

            Console.Write("Enter Salary: ");
            decimal salary = Convert.ToDecimal(Console.ReadLine());

            Console.Write("Enter Hire Date (yyyy-MM-dd): ");
            DateTime hireDate = Convert.ToDateTime(Console.ReadLine());

            Employee emp = new Employee(id, name, gender, level, salary, hireDate);
            Console.WriteLine("Employee Information:");
            Console.WriteLine(emp);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
